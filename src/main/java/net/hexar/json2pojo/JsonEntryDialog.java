package net.hexar.json2pojo;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import org.fife.ui.rsyntaxtextarea.Theme;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

/**
 * A custom dialog which allows the user to input a JSON text.
 */
public class JsonEntryDialog extends JDialog {
    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mContentPane = new JPanel();
        mContentPane.setLayout(new GridLayoutManager(3, 2, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        mContentPane.add(panel1, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        mGenerateBuilders = new JCheckBox();
        mGenerateBuilders.setSelected(false);
        mGenerateBuilders.setText("Generate builders / remove setters");
        mGenerateBuilders.setToolTipText("Removes setters and generates an inner builder class instead.");
        panel1.add(mGenerateBuilders, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        panel1.add(panel2, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        mButtonOK = new JButton();
        mButtonOK.setText("OK");
        panel2.add(mButtonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mButtonCancel = new JButton();
        mButtonCancel.setText("Cancel");
        panel2.add(mButtonCancel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mUseMPrefix = new JCheckBox();
        mUseMPrefix.setSelected(true);
        mUseMPrefix.setText("Field names start with 'm'");
        mUseMPrefix.setToolTipText("Field names are generated with an 'm' prefix.");
        panel1.add(mUseMPrefix, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mContentPane.add(panel3, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(100, 100), new Dimension(400, 300), null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel3.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        mJsonText = new RSyntaxTextArea();
        mJsonText.setBackground(new Color(-12566464));
        mJsonText.setBracketMatchingEnabled(false);
        mJsonText.setHighlightCurrentLine(false);
        mJsonText.setSyntaxEditingStyle("text/json");
        mJsonText.setToolTipText("");
        scrollPane1.setViewportView(mJsonText);
        final JLabel label1 = new JLabel();
        label1.setText("Root Class Name:");
        mContentPane.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mClassName = new JTextField();
        mClassName.setToolTipText("Enter the root class name here.");
        mContentPane.add(mClassName, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mContentPane;
    }

    //region PUBLIC INTERFACES -----------------------------------------------------------------------------------------

    /**
     * A listener to be invoked when the user has clicked the OK button.
     */
    interface OnOkListener {
        /**
         * A callback to be invoked when the user has clicked the OK button.
         *
         * @param className        the class name entered into the dialog.
         * @param jsonText         the JSON text entered into the dialog.
         * @param generateBuilders true if the generated classes should omit setters and generate builders.
         * @param useMPrefix       true if the generated fields should have an 'm' prefix.
         */
        void onOk(String className, String jsonText, boolean generateBuilders, boolean useMPrefix);
    }

    //endregion

    //region CONSTANTS -------------------------------------------------------------------------------------------------

    private static final String CLASS_NAME_REGEX = "[A-Za-z][A-Za-z0-9]*";

    //endregion

    //region MEMBER FIELDS ---------------------------------------------------------------------------------------------

    // Data / State
    private OnOkListener mListener;

    // UI
    private JButton mButtonCancel;
    private JButton mButtonOK;
    private JTextField mClassName;
    private JPanel mContentPane;
    private RSyntaxTextArea mJsonText;
    private JCheckBox mUseMPrefix;
    private JCheckBox mGenerateBuilders;

    //endregion

    //region CONSTRUCTOR -----------------------------------------------------------------------------------------------

    JsonEntryDialog(OnOkListener listener) {
        // Set the listener
        mListener = listener;
        try {
            Method method = getClass().getMethod("$$$setupUI$$$()");
            method.invoke(this);
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
        // Set up the main content
        setContentPane(mContentPane);
        setModal(true);
        getRootPane().setDefaultButton(mButtonOK);

        // Set the minimum dialog size
        setMinimumSize(new Dimension(420, 200));

        // Add button listeners
        mButtonOK.addActionListener(e -> onOK());
        mButtonCancel.addActionListener(e -> onCancel());

        // Call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // Call onCancel() on ESCAPE
        mContentPane.registerKeyboardAction(e -> onCancel(),
                KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
                JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

        // Enable/disable OK button
        mButtonOK.setEnabled(false);
        mClassName.getDocument().addDocumentListener(new TextChangedListener());
        mJsonText.getDocument().addDocumentListener(new TextChangedListener());

        // Set up syntax highlighting
        mJsonText.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JSON);
        try {
            Theme theme = Theme.load(getClass().getResourceAsStream("/themes/dark.xml"));
            theme.apply(mJsonText);
        } catch (IOException ignored) {
        }
        mJsonText.setCodeFoldingEnabled(false);
    }

    //endregion

    //region PUBLIC METHODS --------------------------------------------------------------------------------------------
    //endregion

    //region PRIVATE METHODS -------------------------------------------------------------------------------------------

    private void onCancel() {
        dispose();
    }

    private void onOK() {
        mListener.onOk(
                mClassName.getText(),
                mJsonText.getText(),
                mGenerateBuilders.isSelected(),
                mUseMPrefix.isSelected());
        dispose();
    }

    //region INNER CLASSES ---------------------------------------------------------------------------------------------

    /**
     * Gets called when the JSON text or root class text has changed.
     */
    private class TextChangedListener implements DocumentListener {
        @Override
        public void insertUpdate(DocumentEvent e) {
            validate();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            validate();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            validate();
        }

        /**
         * Validates the class name and JSON text and enables the OK button if validation passes.
         */
        private void validate() {
            String className = mClassName.getText();
            String jsonText = mJsonText.getText();

            if (className.matches(CLASS_NAME_REGEX) && !jsonText.isEmpty()) {
                mButtonOK.setEnabled(true);
            } else {
                mButtonOK.setEnabled(false);
            }
        }
    }

    //endregion
}
